import "highlight.js/styles/github.css";
import type { Metadata } from "next";
import { Toaster } from "react-hot-toast";
import "./globals.css";

export const metadata: Metadata = {
  title: "",
  description: "Generated by ",
};

import React from "react";
import { IoMdClose } from "react-icons/io";
import docs from "./docs.json";
import Header from "./Header";
import Sidebar from "./Sidebar";

type Props = {
  children: React.ReactNode;
};

export default function PackageLayout({ children }: Props) {
  return (
    <html lang="en">
      <body className="h-full">
        <Toaster position="top-center" reverseOrder={false} />
        <div className="bg-base-100 text-base-content">
          <Header />
          <div className="flex flex-col md:grid md:grid-cols-12 xl:flex xl:flex-row w-full">
            <div className="col-start-1 col-end-4">
              <input
                type="checkbox"
                className="submenu"
                id={"content-sidebar"}
              />
              <aside
                role="content-sidebar"
                className="sticky bg-base-100 top-16 h-[calc(100vh-64px)] overflow-y-auto max-h-screen w-72 md:w-full xl:w-72 border-r-2 hidden md:flex flex-col justify-between z-[100]"
              >
                <div className="sticky top-0 flex justify-end md:hidden">
                  <label
                    htmlFor="content-sidebar"
                    className="sticky w-fit top-0 right-0 rounded-none btn btn-sm btn-error text-white z-50"
                  >
                    <IoMdClose size={20} />
                  </label>
                </div>
                <nav className="py-4 w-full px-2">
                  <Sidebar content={docs.structure} />
                </nav>
              </aside>
            </div>
            <div className="col-start-4 col-end-13 w-full">{children}</div>
          </div>
        </div>
      </body>
    </html>
  );
}

// export function generateStaticParams(props: { params: { path: any } }) {
//   return docs?.files?.filter(r => r.path).map(r => {
//     return {
//       path: r?.path?.split("/"),
//     }
//   })
// }
